'still limited on chinese systems as above, removed as redundant
'left for testing just in case new idea pops up..
'Private Declare Function chacha3 Lib "libchacha" ( _
'            ByVal data As String, _
'            Optional ByVal key As String = "", _
'            Optional ByVal dataLen As Long = 0 _
'        ) As String
   

//you can use this method to explicitly set the parameters, including binary keys..
void __stdcall chainit(char* _key, uint32_t kLen, char* _nonce, uint32_t nLen, uint32_t count)
{
	counter = count;
	memset(nonce,0,sizeof(nonce));
	memset(key,0,sizeof(key));

	if(_nonce != 0 && nLen > 0){
		if(nLen > 8) nLen = 8;
		memcpy(nonce,_nonce,nLen);
	}

	if(_key != 0 && kLen > 0){
		if(kLen > 32) kLen = 32;
		memcpy(key,_key,kLen);
	}

	isInit = true;
}


BSTR __stdcall chacha3(uint8_t *buf, char* _key=0, uint32_t bufLen = 0 )
{

  //we will let key be optional parameter but include for convience. if you need 
  //to use a binary key or configure other params, use chainit directly.
  if(_key != 0){
	uint32_t kLen = strlen(_key);
	if(kLen > 0) chainit(_key, kLen, 0,0,0);
  }

  if(!isInit) return 0;
  if(buf==0 || *buf==0) return 0;
  
  //not binary safe but ok for initial encryption of text.
  if(bufLen==0) bufLen = strlen((char*)buf); 
  if(bufLen==0) return 0;
   
  uint8_t * tmp = (uint8_t *)malloc(bufLen);
  if(tmp==0) return 0;
  
  chacha20_ctx ctx;
  chacha20_setup(&ctx, key, sizeof(key), nonce);
  chacha20_counter_set(&ctx, counter);
  chacha20_encrypt(&ctx, buf, tmp, bufLen);

  //this can contain binary data ok..
  BSTR b = SysAllocStringByteLen((LPCSTR)tmp,bufLen);
  isInit = false;
  free(tmp);

  return b;
}
